<?php
/**
 * @copyright 2017 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE.txt
 */
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\directory\DirectoryService;
use Drupal\onboard\OnBoardService;

function cob_preprocess_page(&$vars)
{
    if (isset($vars['node'])) {
        if ($vars['node']->hasField('field_cover_image')) {
            $styles = ['cover_small', 'cover_medium', 'cover_large'];

            foreach ($vars['node']->get('field_cover_image') as $item) {
                $v = $item->getValue();
                $f = File::load($v['target_id']);
                foreach ($styles as $s) {
                    $vars['cover_image'][$s] = ImageStyle::load($s)->buildUrl($f->getFileUri());
                }
            }
        }

        $contactInfo = [];
        if ($vars['node']->hasField( 'field_committee')) {
            $id = $vars['node']->get('field_committee')->value;
            if ($id) {
                $json = OnBoardService::committee_info($id);
                if ($json) {
                    _cob_mapContactInfoFields($contactInfo, $json['info'], [
                        'name'    => 'name',
                        'email'   => 'email',
                        'phone'   => 'phone',
                        'address' => 'address',
                        'city'    => 'city',
                        'state'   => 'state',
                        'zip'     => 'zip'
                    ]);
                }
            }
        }

        _cob_contactInfoFromNode($vars['node'], $contactInfo);

        if ($vars['node']->hasField('field_location')) {
            $l = $vars['node']->get('field_location')->entity;
            _cob_contactInfoFromNode($l, $contactInfo);
        }

        if ($contactInfo) { $vars['contactInfo'] = $contactInfo; }
    }
}


function cob_preprocess_paragraph__info_card(&$vars)
{
    $vars['title'] = !empty($vars['elements']['field_info_title']['#items'])
                          ? $vars['elements']['field_info_title']['#items'][0]->value
                          : null;
    $vars['text' ] = !empty($vars['elements']['field_info_text' ]['#items'])
                          ? $vars['elements']['field_info_text' ]['#items'][0]->value
                          : null;

    if ((!$vars['title'] || !$vars['text'])
        && preg_match('|entity:([a-z]+)/(\d+)|',
                        $vars['content']['field_info_link']['#items'][0]->getString(),
                        $matches)) {
        $type = $matches[1];
        $id   = $matches[2];

        $node = \Drupal::entityTypeManager()->getStorage($type)->load($id);
        if (!$vars['title']) { $vars['title'] = $node->title->value;  }
        if (!$vars['text' ]) { $vars['text' ] = $node->body->summary; }
    }
}

function _cob_contactInfoFromNode($node, array &$info)
{
    if (empty($info['facebook']) && $node->hasField('field_facebook_page')) {
        $v = $vars['node']->get('field_facebook_page')->getValue();
        if (!empty($v[0]['uri'])) {
            $contactInfo['facebook'] = $v[0]['uri'];
        }
    }
    if (empty($info['twitter' ]) && $node->hasField('field_twitter_account')) {
        $v = $node->get('field_twitter_account')->getValue();
        if (!empty($v[0]['uri'])) {
            $contactInfo['twitter'] = $v[0]['uri'];
        }
    }

    if ($node->hasField( 'field_directory_dn')) {
        $dn = $node->get('field_directory_dn')->value;
        if ($dn) { _cob_contactInfoForDn($dn, $contactInfo); }
    }

    $map = [
        'email'    => 'field_email',
        'phone'    => 'field_phone',
        'fax'      => 'field_fax',
        'address'  => 'field_street_address',
        'zip'      => 'field_zipcode'
    ];
    foreach ($map as $i=>$f) {
        if (empty($info[$i]) && $node->hasField($f)) {
            $value = $node->get($f)->value;
            if ($value) { $info[$i] = $value; }
        }
    }
}

/**
 * Populates contactInfo array with data from Directory webservice
 *
 * @param string $dn
 * @param array  $contactInfo Reference to the array to populate
 */
function _cob_contactInfoForDn($dn, array &$info)
{
    $json = DirectoryService::department_info($dn);
    if ($json) {
        _cob_mapContactInfoFields($info, $json, [
            'name'    => 'name',
            'email'   => 'email',
            'phone'   => 'office',
            'fax'     => 'fax',
            'address' => 'address',
            'city'    => 'city',
            'state'   => 'state',
            'zip'     => 'zip'
        ]);
    }
}

/**
 * Populates empty $info fields with data according to a map.
 *
 * Does NOT replace existing values in $info.
 *
 * Map array  must specify info fields as keys and data fields as values.
 * $map[ $infoField => $dataField ]
 *
 * @param array $info Reference to contactInfo array to populate
 * @param array $data Array of data to copy
 * @param array $map  Associative array of data fields to info fields
 */
function _cob_mapContactInfoFields(array &$info, array $data, array $map)
{
    foreach ($map as $infoField => $dataField) {
        if (empty($info[$infoField])) { $info[$infoField] = $data[$dataField]; }
    }
}
