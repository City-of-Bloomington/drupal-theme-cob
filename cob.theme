<?php
/**
 * @copyright 2017-2021 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE
 */
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\core\Site\Settings;
use Drupal\core\Url;

use Drupal\calendar\GoogleGateway;
use Drupal\directory\DirectoryService;
use Drupal\interactivemap\MapGateway;
use Drupal\onboard\OnBoardService;

// Some node_ids for pages in the site
const DEPARTMENT_COUNCIL = 2796;
const BOARD_COUNCIL      =   47;

/**
 * Prepare contact information for various modules
 *
 * This hook will get called multiple times for a single page render.
 * We rely on the fact that module hooks get called before the general page
 * hook. During the module hook call, we load a location node.  Then, during the
 * page hook call, we set inject that node into $vars.  Once injected, we
 * let the normal cob_preprocess_page() handle rendering contact information
 * for that node.
 *
 * PROMT
 * The promt module will be rendering promt programs.  When we are displaying
 * a single program that has a location, we need to use the contact information
 * from the Drupal node that has that location_id. We are storing the
 * location_id as the field_promt_id for Drupal's content type: location.
 *
 * Animal Shelter
 * All animal shelter routes are for the same location: 204
 *
 * @implements module_preprocess()
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/group/themeable/8.2.x
 */
function cob_preprocess(&$vars, $hook)
{
    static $location = null;
    static $route    = null;

    switch ($hook) {
        case 'promt_program':
            $route = 'promt_program';
            if (!empty($vars['program']['location_id'])) {
                $location_id = $vars['program']['location_id'];

                $query = \Drupal::entityQuery('node')
                    ->condition('status', 1)
                    ->condition('type', 'location')
                    ->condition('field_promt_id', $location_id);
                $nids  = $query->execute();
                if ($nids) {
                    $location = \Drupal::entityTypeManager()->getStorage('node')->load(current($nids));
                    $vars['location'] = $location;
                }
            }
        break;

        case 'asm_adoptable_animal':
        case 'asm_adoptable_animals':
        case 'asm_held_animals':
        case 'asm_lf_animal':
        case 'asm_lf_animals':
            $route = $hook;
            $location = \Drupal::entityTypeManager()->getStorage('node')->load(204);
            $vars['base_path'] = base_path();
        break;

        case 'page':
            if ($location && empty($vars['node'])) {
                $vars['node'] = $location;
            }
        break;
    }
}

/**
 * @param  int   $numdays   The number of days into the future to gather events
 * @param  int   $maxevents Maximum number of events to return
 * @return array            The themed render array for the events
 */
function _cob_events($calendarId, int $numdays, int $maxevents): array
{
    $start = new \DateTime();
    $end   = new \DateTime();
    $end->add(new \DateInterval("P{$numdays}D"));

    $events = null;
    try { $events = GoogleGateway::events($calendarId, $start, $end, $maxevents); }
    catch (\Exception $e) { }

    if ($events) {
        return [
            '#theme'      => 'calendar_events',
            '#calendarId' => $calendarId,
            '#events'     => GoogleGateway::limitEvents($events, $maxevents)
        ];
    }
    return [];
}

function cob_preprocess_page__front(&$vars)
{
    $id = Settings::get('cob_front_calendar');
    if ($id) {
        $vars['events'] = _cob_events($id, 7, 4);
    }

    $vars['available_messages'] = !empty(\Drupal::messenger()->all());

    $query   = \Drupal::entityQuery('node')
                ->condition('type', 'alert')
                ->condition('status',  1)
                ->sort('created', 'desc')
                ->range(0, 5);
    $alerts = _cob_renderNodesByQuery($query, 'teaser');
    if ($alerts) {
        $vars['alerts'] = $alerts;
    }

    $query   = \Drupal::entityQuery('node')
                ->condition('type', 'news')
                ->condition('status',  1)
                ->sort('created', 'desc')
                ->range(0, 5);
    $vars['news' ] = _cob_renderNodesByQuery($query, 'teaser');
    $vars['about'] = _cob_renderNodeById(223, 'promo');
    $vars['mayor'] = _cob_renderNodeById(608, 'promo');

    // Pothole dataset query
    #$vars['pothole_count'] = __cob_latestPotholeCount();
}

function cob_preprocess_page(&$vars)
{
    if (isset($vars['node']) && $vars['node'] instanceof \Drupal\node\Entity\Node) {
        $vars['page']['title'] = $vars['node']->title->value;

        $urls = _cob_coverImageForEntity($vars['node']);
        if ($urls) { $vars['cover_image'] = $urls; }

        $contactInfo =  _cob_contactInfoFromNode($vars['node']);
        if ($contactInfo) {
            $vars['contactInfo'] = $contactInfo;
        }

        $vars['available_messages'] = !empty(\Drupal::messenger()->all());

        // Custom content for the Parks and Rec landing page
        if ((int)$vars['node']->get('nid')->value === 250) {
            $vars['program_search_form'] = \Drupal::formBuilder()->getForm('Drupal\promt\Form\ProgramSearchForm');
            $vars['events'    ] = $vars['node']->field_calendar  ->view('full');
            $vars['related'   ] = $vars['node']->field_department->view('full');
            $vars['tlrc'      ] = _cob_renderNodeById(502, 'promo');
            $vars['rentals'   ] = _cob_renderNodeById(368, 'promo');
            $vars['categories'] = _cob_renderNodeById([438,252,253,254], 'info_card');
        }
        // Don't display committee members on pages rendered by the onboard module
        $m = \Drupal::routeMatch()->getRouteName();
        if (substr($m, 0, 7) == 'onboard') {
            if (isset($vars['page']['content']['committeemembers'])) {
                unset($vars['page']['content']['committeemembers']);
            }
        }
    }
    else {
        $route = \Drupal::routeMatch()->getRouteName();
        if ($route == 'entity.taxonomy_term.canonical') {
            $tid  = \Drupal::routeMatch()->getRawParameter(  'taxonomy_term');
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);

            $urls = _cob_coverImageForEntity($term);
            if ($urls) { $vars['cover_image'] = $urls; }
        }
    }
}

/**
 * Returns URL's to all the styles for a cover image.
 *
 * The indexes for the return array will be the names of the image styles.
 * $urls[
 *   'cover_small' =>'https://host/sites/default/files/styles/small/image.png',
 *   'cover_medium'=>'https://host/sites/default/files/styles/medium/image.png',
 *   'cover_large' =>'https://host/sites/default/files/styles/large/image.png'
 * ]
 *
 * @return array  An array of url strings
 */
function _cob_coverImageForEntity(FieldableEntityInterface $entity): array
{
    $urls = [];
    if ($entity->hasField('field_cover_image')) {
        $img = $entity->get('field_cover_image')->first();
        if ($img) {
            $styles = ['cover_small', 'cover_medium', 'cover_large'];
            $target = $img->get('entity')->getTarget();
            if ($target) {
                $ent = $target->getValue()->field_image->entity;
                if ($ent) {
                    foreach ($styles as $s) {
                        $urls[$s] = ImageStyle::load($s)->buildUrl($ent->getFileUri());
                    }
                }
            }
        }
    }
    return $urls;
}

function cob_preprocess_node(&$vars)
{
    $contactInfo = _cob_contactInfoFromNode($vars['node']);
    if ($contactInfo) {
        $vars['contactInfo'] = $contactInfo;
    }

    if ($vars['view_mode'] == 'full') {
        $nid     = (int)$vars['node']->get('nid' )->value;
        switch ($nid) {
            case 790: // Maps Landing Page
                $vars['maps'] = [
                    '#theme' => 'interactivemap_maps',
                    '#maps'  => MapGateway::maps()
                ];
            break;

            // Engineering Projects
            case 573:
                $query = \Drupal::entityQuery('node')
                       ->condition('type', 'project_page')
                       ->condition('field_active',  true)
                       ->sort('created', 'desc');
                $vars['projects'] = _cob_renderNodesByQuery($query, 'info_card');
            break;

            // Boards
            case 217:
                $committees = [];
                foreach (OnBoardService::committee_list() as $c) {
                    $committees[$c['id']] = $c;
                }

                $manager = \Drupal::entityTypeManager();
                $storage = $manager->getStorage('node');
                $builder = $manager->getViewBuilder('node');

                // Active Boards that are not part of the City Council
                $query   = \Drupal::entityQuery('node')->condition('type', 'board_commission' )
                                                       ->condition('field_active', true )
                                                       ->condition('field_department', DEPARTMENT_COUNCIL, '<>')
                                                       ->sort('title');
                $nodes   = $storage->loadMultiple($query->execute());
                __cob_add_onboard_flags_to_nodes($nodes, $committees);

                $vars['boards_active'] = $builder->viewMultiple($nodes, 'info_card');

                // City Council boards that are active
                $query = \Drupal::entityQuery('node')->condition('type', 'board_commission')
                                                     ->condition('field_active',       true)
                                                     ->condition('field_department', DEPARTMENT_COUNCIL)
                                                     ->sort('title');
                // move the city council to the first item in the list
                $nodes   = $storage->loadMultiple($query->execute());
                $ci      = null;
                $council = null;
                foreach ($nodes as $i=>$n) { if ($n->id() == BOARD_COUNCIL) { $ci = $i; } }
                if ($ci) {
                    $council = $nodes[$ci];
                    unset($nodes[$ci]);
                    $nodes = array_merge([$council], $nodes);
                }
                __cob_add_onboard_flags_to_nodes($nodes, $committees);
                $vars['boards_council'] = $builder->viewMultiple($nodes, 'info_card');

                // All Inactivate boards
                $vars['boards_inactive'] = _cob_renderNodesByQuery(
                    \Drupal::entityQuery('node')->condition('type', 'board_commission')
                                                ->condition('field_active',  false)
                                                ->sort('title'),
                    'info_card'
                );
                $vars['events'] = _cob_events('bloomington.in.gov_r7b1mkrme1r8uhl3b5amhb50bc@group.calendar.google.com', 30, 24);
            break;
        }

        if ($vars['node']->getType() == 'board_commission') {
            $start = new \DateTime();
            $end   = new \DateTime();
            $end->add(new \DateInterval("P60D"));

            switch ($nid) {
                case BOARD_COUNCIL:
                    $calendar_id = 'bloomington.in.gov_7rki30ccsun4vk4stoq2n4nreg@group.calendar.google.com';
                    $events      = GoogleGateway::events($calendar_id, $start, $end, true, 4);
                    $vars['meetings'] = [
                        '#theme'      => 'calendar_events',
                        '#events'     => $events,
                        '#calendarId' => $calendar_id
                    ];
                break;
                default:
                    $committee_id = $vars['node']->get('field_committee')->value;
                    if ($committee_id) {
                        $committee    = OnBoardService::committee_info($committee_id);
                        $meetings     = OnBoardService::meetings($committee_id,  null, $start, $end, 4);
                        $vars['meetings'] = [
                            '#theme'     => 'onboard_upcoming_meetings',
                            '#meetings'  => $meetings,
                            '#committee' => $committee,
                            '#nid'       => $nid
                        ];
                    }
            }
        }

        $vars['regions']['secondary_menu'] = _cob_renderRegion('secondary_menu');
    }
}

function __cob_add_onboard_flags_to_nodes(array &$nodes, array $committees)
{
    foreach ($nodes as $i=>$n) {
        $cid = (int)$n->field_committee->getString();
        if ($cid && array_key_exists($cid, $committees)) {
            $nodes[$i]->vacancies         = $committees[$cid]['vacancies'];
            $nodes[$i]->takesApplications = $committees[$cid]['takesApplications'];
        }
    }
}

/**
 * Load events calendar when rendering the news archive
 *
 * @param $vars array  Theme variables set by the Archive Controller
 * @see drupal-module-archive/src/Controller/ArchiveController
 */
function cob_preprocess_archive_results(&$vars)
{
    if ($vars['type'] == 'news') {
        $id = Settings::get('cob_front_calendar');
        if ($id) {
            $vars['events'] = _cob_events($id, 7, 4);
        }
    }
}

function cob_preprocess_paragraph__info_card(&$vars)
{
    $vars['title'] = !empty($vars['elements']['field_info_title']['#items'])
                          ? $vars['elements']['field_info_title']['#items'][0]->value
                          : null;
    $vars['text' ] = !empty($vars['elements']['field_info_text' ]['#items'])
                          ? $vars['elements']['field_info_text' ]['#items'][0]->value
                          : null;

    if ((!$vars['title'] || !$vars['text'])
        && !empty($vars['content']['field_info_link']['#items'][0])
        && preg_match('|entity:([a-z]+)/(\d+)|',
                  $vars['content']['field_info_link']['#items'][0]->getString(),
                  $matches)) {
        $type = $matches[1];
        $id   = $matches[2];

        $node = \Drupal::entityTypeManager()->getStorage($type)->load($id);
        if ($node) {
            if (!$vars['title']) { $vars['title'] = $node->title->value;  }
            if (!$vars['text' ]) { $vars['text' ] = $node->body->summary; }
        }
    }
}

function cob_preprocess_field__entity_reference(&$vars)
{
    foreach ($vars['items'] as $i=>$item) {
        if (!empty($item['content']['#type']) && $item['content']['#type'] == 'link') {
            $vars['items'][$i]['content']['#title'] = "{$vars['element']['#title']}: {$item['content']['#title']}";
            $vars['items'][$i]['content']['#options']['attributes']['class'][] = 'button';
        }
    }
}

/**
 * Link promo titles to their nodes
 */
function cob_preprocess_field__field_promo_title(&$vars)
{
    $url = Url::fromRoute('entity.node.canonical', ['node'=>$vars['element']['#object']->nid->value])->toString();

    foreach ($vars['items'] as $i=>$item) {
        $vars['items'][$i]['content'] = [
            '#markup' => "<a href=\"$url\" class=\"button\">{$item['content']['#context']['value']}</a>"
        ];

    }
}

/**
 * Add titles to internal links
 *
 * User should not type titles into links, if they're to internal pages.
 * Rather, the title should be pulled dynamically from the page they're
 * linking to.  Title on pages change over time, and we hate going back
 * and trying to update all the links with the new title.
 */
function cob_preprocess_field__link(&$vars)
{
    foreach ($vars['element']['#items'] as $i=>$item) {
        $title = $item->get('title')->getString();
        if (!$title) {
            $uri = $item->get('uri')->getString();
            if (substr($uri, 0, 6) == 'entity') {
                $params = Url::fromUri($uri)->getRouteParameters();
                $type   = key($params);
                $entity = \Drupal::entityTypeManager()->getStorage($type)->load($params[$type]);
                if ($entity) {
                    $vars['items'][$i]['content']['#title'] = $entity->title->value;
                }
            }
        }
    }

    // All link fields are going to be styled as some type of button
    foreach ($vars['items'] as $i=>$item) {
        $vars['items'][$i]['content']['#options']['attributes']['class'][] = 'button';
    }
}

function cob_preprocess_field__node__body__news(&$vars)
{
    $vars['label'] = $vars['element']['#object']->getTitle();
}

function cob_preprocess_image(&$vars)
{
    unset($vars['attributes']['width'], $vars['attributes']['height']);
}

/**
 * Pretty prints military time
 *
 * Takes a four digit, military time and returns a short version, using am/pm
 */
function _cob_ftime($time)
{
    $time = trim($time);

    $h = (int)substr($time, 0, 2);
    $m = (int)substr($time, -2);

    $a = $h >= 12 ? 'pm'  : 'am';
    $h = $h >  12 ? $h-12 : $h;
    // Leave off the minutes, if it's the top of the hour
    $m = $m ? ":$m" : '';

    return "$h$m$a\n";
}

function cob_preprocess_field__field_hours(&$vars)
{
    $days  = [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
    ];
    $hours = [];
    $temp  = [];
    foreach ($vars['items'] as $i=>$item) {
        foreach (explode("\n", $item['content']['#context']['value']) as $line) {
            $hour = explode(',', $line);
            if (count($hour) === 3) {
                $day   = ucfirst(trim($hour[0]));
                $start = _cob_ftime($hour[1]);
                $end   = _cob_ftime($hour[2]);

                $temp[$day] = "$start-$end";
            }
        }
        foreach ($days as $d) {
            $hours[$d] = isset($temp[$d]) ? $temp[$d] : 'Closed';
        }

        $vars['items'][$i]['hours'] = $hours;
    }
}

function cob_form_search_block_form_alter(&$form, &$form_state)
{
    $form['keys']['#attributes']['placeholder'][] = 'Search...';
}

/**
 * Populates contact information from various sources for a given node
 *
 * This function will cache the results by NodeID.  The contactInfo
 * queries are extensive, and can be slow.  We don't want to do this
 * more than once.
 *
 * @param Node $node
 * @return array
 */
function _cob_contactInfoFromNode(Node $node)
{
    static $info = [];
    $nid = $node->nid->value;


    // If the NID has been set, then we've already attempted a lookup.
    // If it's there, and it is empty, then the lookup returned no results.
    // Don't waste time doing another lengthy lookup, just to get empty
    // results again.
    if (isset($info[$nid])) { return $info[$nid]; }

    $info[$nid] = [];

    if (empty($info[$nid]['facebook']) && $node->hasField('field_facebook_page')) {
        $v = $node->get('field_facebook_page')->getValue();
        if (!empty($v[0]['uri'])) {
            $info[$nid]['links']['facebook'] = $v[0]['uri'];
        }
    }
    if (empty($info[$nid]['twitter' ]) && $node->hasField('field_twitter_account')) {
        $v = $node->get('field_twitter_account')->getValue();
        if (!empty($v[0]['uri'])) {
            $info[$nid]['links']['twitter'] = $v[0]['uri'];
        }
    }

    if ($node->hasField( 'field_directory_dn')) {
        $dn = $node->get('field_directory_dn')->value;
        if ($dn) { _cob_contactInfoForDn($dn, $info[$nid]); }
    }

    $map = [
        'email'    => 'field_email',
        'phone'    => 'field_phone',
        'fax'      => 'field_fax',
        'address'  => 'field_street_address',
        'zip'      => 'field_zipcode'
    ];
    foreach ($map as $i=>$f) {
        if (empty($info[$nid][$i]) && $node->hasField($f)) {
            $value = $node->get($f)->value;
            if ($value) { $info[$nid][$i] = $value; }
        }
    }
    if (!empty($info[$nid]['zip'])) {
        if (empty($info[$nid]['city' ])) { $info[$nid]['city' ] = 'Bloomington'; }
        if (empty($info[$nid]['state'])) { $info[$nid]['state'] = 'IN';          }
    }

    if ($node->hasField('field_location')) {
        $l = $node->get('field_location')->entity;
        if ($l) {
            $info[$nid]['location_nid'] = $l->get('nid')->value;

            $li = _cob_contactInfoFromNode($l);
            foreach ($li as $k=>$v) {
                if (empty($info[$nid][$k])) { $info[$nid][$k] = $v; }
            }
        }
    }

    if ($node->hasField('field_department')) {
        $d = $node->get('field_department')->entity;
        if ($d) {
            $info[$nid]['department_nid'] = $d->get('nid')->value;

            $di = _cob_contactInfoFromNode($d);
            foreach ($di as $k=>$v) {
                if (empty($info[$nid][$k])) { $info[$nid][$k] = $v; }
            }
        }
    }

    return $info[$nid];
}

/**
 * Populates contactInfo array with data from Directory webservice
 *
 * @param string $dn
 * @param array  $contactInfo Reference to the array to populate
 */
function _cob_contactInfoForDn($dn, array &$info)
{
    if (\Drupal::moduleHandler()->moduleExists('directory')) {
        $json = DirectoryService::department_info($dn);
        if ($json) {
            _cob_mapContactInfoFields($info, $json, [
                'name'    => 'name',
                'email'   => 'email',
                'phone'   => 'office',
                'fax'     => 'fax',
                'address' => 'address',
                'city'    => 'city',
                'state'   => 'state',
                'zip'     => 'zip'
            ]);
        }
    }
}

/**
 * Populates empty $info fields with data according to a map.
 *
 * Does NOT replace existing values in $info.
 *
 * Map array  must specify info fields as keys and data fields as values.
 * $map[ $infoField => $dataField ]
 *
 * @param array $info Reference to contactInfo array to populate
 * @param array $data Array of data to copy
 * @param array $map  Associative array of data fields to info fields
 */
function _cob_mapContactInfoFields(array &$info, array $data, array $map)
{
    foreach ($map as $infoField => $dataField) {
        if (empty($info[$infoField])) { $info[$infoField] = $data[$dataField]; }
    }
}


/**
 * @param QueryInterface $query
 * @param string         $viewMode
 * @return array                   The themed render array
 */
function _cob_renderNodesByQuery(\Drupal\Core\Entity\Query\QueryInterface $query, string $viewMode): array
{
    static $manager;
    static $builder;
    static $storage;

    if (!$manager) {
        $manager = \Drupal::entityTypeManager();
        $builder = $manager->getViewBuilder('node');
        $storage = $manager->getStorage('node');
    }
    return $builder->viewMultiple($storage->loadMultiple($query->execute()), $viewMode);
}

/**
 * @param  int|array $nid      A node ID or array of node IDs
 * @param  string    $viewMode
 * @return array               The themed render array
 */
function _cob_renderNodeById($nid, string $viewMode): array
{
    static $manager;
    static $builder;
    static $storage;

    if (!$manager) {
        $manager = \Drupal::entityTypeManager();
        $builder = $manager->getViewBuilder('node');
        $storage = $manager->getStorage('node');
    }
    return is_array($nid)
        ? $builder->viewMultiple($storage->loadMultiple($nid), $viewMode)
        : $builder->view        ($storage->load        ($nid), $viewMode);
}


/**
 * @param  string $region
 * @return array           An array of the themed blocks in the region
 */
function _cob_renderRegion(string $region): array
{
    static $manager;
    static $builder;
    static $storage;

    if (!$manager) {
        $manager = \Drupal::entityTypeManager();
        $builder = $manager->getViewBuilder('block');
        $storage = $manager->getStorage('block');
    }

    $blocks = $storage->loadByProperties(['theme'=>'cob', 'region'=>$region]);
    uasort($blocks, 'Drupal\block\Entity\Block::sort');
    return $builder->viewMultiple($blocks);
}

/**
 * Downloads and processes a Google spreadheet for pothole counts
 */
function __cob_latestPotholeCount(): int
{
    $csv  = '/tmp/potholes.csv';
    $url  = 'https://docs.google.com/spreadsheets/d/14qN0YTLU4klEhr9H58Eu2zzTMi2bCnjGC4fJ59e-phs/export?format=csv&gid=1274323447';
    $year = '2020';

    if (is_file($csv)) {
        $yesterday    = new \DateTime('yesterday');
        $lastModified = new \DateTime();
        $lastModified->setTimestamp(filemtime($csv));

        if ($lastModified < $yesterday) { unlink($csv); }
    }

    if (!is_file($csv)) {
        $client   = \Drupal::httpClient(['timeout' => 5]);
        $response = $client->get($url);
        if ($response) { file_put_contents($csv, $response->getBody()); }
        else           { return 0; }
    }

    $data = fopen($csv, 'r');
    $count = 0;
    $i     = 0;
    while ($row = fgetcsv($data)) {
        if ($i == 0) { $i++; continue; }

        if (!empty($row[0]) && !empty($row[1])) {
            $date = new \DateTime($row[0]);
            if ($date->format('Y') == $year) {
                $count += (int)$row[1];
            }
        }
    }
    return $count;
}
