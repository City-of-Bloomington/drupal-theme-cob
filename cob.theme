<?php
/**
 * @copyright 2017 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE.txt
 */
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\core\Site\Settings;

use Drupal\calendar\GoogleGateway;
use Drupal\directory\DirectoryService;
use Drupal\onboard\OnBoardService;

function cob_preprocess_page__front(&$vars)
{
    $id = Settings::get('cob_front_calendar');
    if ($id) {
        $numdays   = 7;
        $maxevents = 4;

        $start = new \DateTime();
        $end   = new \DateTime();
        $end->add(new \DateInterval("P{$numdays}D"));

        $events  = GoogleGateway::events($id, $start, $end);
        $display = [];
        $count   = 0;
        foreach ($events as $e) {
            if (++$count > $maxevents) { break; }

            $display[] = $e;
        }

        $vars['events'] = [
            '#theme'      => 'calendar_events',
            '#events'     => $display,
            '#calendarId' => $id
        ];
    }
}

function cob_preprocess_page(&$vars)
{
    if (isset($vars['node']) && $vars['node'] instanceof \Drupal\node\Entity\Node) {
        if ($vars['node']->hasField('field_cover_image')) {
            $styles = ['cover_small', 'cover_medium', 'cover_large'];

            foreach ($vars['node']->get('field_cover_image') as $item) {
                $v = $item->getValue();
                $f = File::load($v['target_id']);
                foreach ($styles as $s) {
                    $vars['cover_image'][$s] = ImageStyle::load($s)->buildUrl($f->getFileUri());
                }
            }
        }

        $contactInfo =  _cob_contactInfoFromNode($vars['node']);
        if ($contactInfo) {
            $vars['contactInfo'] = $contactInfo;
        }

        $vars['available_messages'] = !empty(drupal_get_messages(null, false));
    }
}

function cob_preprocess_node(&$vars)
{
    $contactInfo = _cob_contactInfoFromNode($vars['node']);
    if ($contactInfo) {
        $vars['contactInfo'] = $contactInfo;
    }

    $nid  = (int)$vars['node']->get('nid' )->value;
    if ($nid === 250 || $vars['node']->hasField('field_promt_id')) {
        $vars['program_search_form'] = \Drupal::formBuilder()->getForm('Drupal\promt\Form\ProgramSearchForm');
    }
}

function cob_preprocess_paragraph__info_card(&$vars)
{
    $vars['title'] = !empty($vars['elements']['field_info_title']['#items'])
                          ? $vars['elements']['field_info_title']['#items'][0]->value
                          : null;
    $vars['text' ] = !empty($vars['elements']['field_info_text' ]['#items'])
                          ? $vars['elements']['field_info_text' ]['#items'][0]->value
                          : null;

    if ((!$vars['title'] || !$vars['text'])
        && !empty($vars['content']['field_info_link']['#items'][0])
        && preg_match('|entity:([a-z]+)/(\d+)|',
                  $vars['content']['field_info_link']['#items'][0]->getString(),
                  $matches)) {
        $type = $matches[1];
        $id   = $matches[2];

        $node = \Drupal::entityTypeManager()->getStorage($type)->load($id);
        if (!$vars['title']) { $vars['title'] = $node->title->value;  }
        if (!$vars['text' ]) { $vars['text' ] = $node->body->summary; }
    }
}

function cob_preprocess_field__entity_reference(&$vars)
{
    foreach ($vars['items'] as $i=>$item) {
        $vars['items'][$i]['content']['#title'] = "{$vars['element']['#title']}: {$vars['items'][$i]['content']['#title']}";
        $vars['items'][$i]['content']['#options']['attributes']['class'][] = 'button';
    }
}

function cob_preprocess_field__field_related_links(&$vars)
{
    foreach ($vars['items'] as $i=>$item) {
        $vars['items'][$i]['content']['#options']['attributes']['class'][] = 'button';
    }
}

function cob_form_search_block_form_alter(&$form, &$form_state)
{
    $form['#prefix'] = "<a href=\"https://docs.google.com/a/bloomington.in.gov/forms/d/1ydyb7gHV4x7SUnguHcQILDDWHKTkZ7K-u6bewn6GNp0/viewform\">Feedback</a>";
    $form['keys']['#attributes']['placeholder'][] = 'Type here';
}

function cob_preprocess_promt_program(&$vars)
{
}

/**
 * Populates contact information from various sources for a given node
 *
 * This function will cache the results by NodeID.  The contactInfo
 * queries are extensive, and can be slow.  We don't want to do this
 * more than once.
 *
 * @param Node $node
 * @return array
 */
function _cob_contactInfoFromNode(Node $node)
{
    static $info = [];
    $nid = $node->nid->value;


    // If the NID has been set, then we've already attempted a lookup.
    // If it's there, and it is empty, then the lookup returned no results.
    // Don't waste time doing another lengthy lookup, just to get empty
    // results again.
    if (isset($info[$nid])) { return $info[$nid]; }

    $info[$nid] = [];

    if ($node->hasField( 'field_committee')) {
        $id = $node->get('field_committee')->value;
        if ($id) {
            $json = OnBoardService::committee_info($id);
            if ($json) {
                _cob_mapContactInfoFields($info[$nid], $json['info'], [
                    'name'    => 'name',
                    'email'   => 'email',
                    'phone'   => 'phone',
                    'address' => 'address',
                    'city'    => 'city',
                    'state'   => 'state',
                    'zip'     => 'zip'
                ]);
                $info[$nid]['links']['onboard'] = OnBoardService::getUrl()."/committees/info?committee_id=".$json['info']['id'];
            }
        }
    }

    if (empty($info[$nid]['facebook']) && $node->hasField('field_facebook_page')) {
        $v = $node->get('field_facebook_page')->getValue();
        if (!empty($v[0]['uri'])) {
            $info[$nid]['links']['facebook'] = $v[0]['uri'];
        }
    }
    if (empty($info[$nid]['twitter' ]) && $node->hasField('field_twitter_account')) {
        $v = $node->get('field_twitter_account')->getValue();
        if (!empty($v[0]['uri'])) {
            $info[$nid]['links']['twitter'] = $v[0]['uri'];
        }
    }

    if ($node->hasField( 'field_directory_dn')) {
        $dn = $node->get('field_directory_dn')->value;
        if ($dn) { _cob_contactInfoForDn($dn, $info[$nid]); }
    }

    $map = [
        'email'    => 'field_email',
        'phone'    => 'field_phone',
        'fax'      => 'field_fax',
        'address'  => 'field_street_address',
        'zip'      => 'field_zipcode'
    ];
    foreach ($map as $i=>$f) {
        if (empty($info[$nid][$i]) && $node->hasField($f)) {
            $value = $node->get($f)->value;
            if ($value) { $info[$nid][$i] = $value; }
        }
    }
    if (!empty($info[$nid]['zip'])) {
        if (empty($info[$nid]['city' ])) { $info[$nid]['city' ] = 'Bloomington'; }
        if (empty($info[$nid]['state'])) { $info[$nid]['state'] = 'IN';          }
    }

    if ($node->hasField('field_location')) {
        $l = $node->get('field_location')->entity;
        if ($l) {
            $info[$nid]['location_nid'] = $l->get('nid')->value;

            $li = _cob_contactInfoFromNode($l);
            foreach ($li as $k=>$v) {
                if (empty($info[$nid][$k])) { $info[$nid][$k] = $v; }
            }
        }
    }

    if ($node->hasField('field_department')) {
        $d = $node->get('field_department')->entity;
        if ($d) {
            $info[$nid]['department_nid'] = $d->get('nid')->value;

            $di = _cob_contactInfoFromNode($d);
            foreach ($di as $k=>$v) {
                if (empty($info[$nid][$k])) { $info[$nid][$k] = $v; }
            }
        }
    }

    return $info[$nid];
}

/**
 * Populates contactInfo array with data from Directory webservice
 *
 * @param string $dn
 * @param array  $contactInfo Reference to the array to populate
 */
function _cob_contactInfoForDn($dn, array &$info)
{
    if (\Drupal::moduleHandler()->moduleExists('directory')) {
        $json = DirectoryService::department_info($dn);
        if ($json) {
            _cob_mapContactInfoFields($info, $json, [
                'name'    => 'name',
                'email'   => 'email',
                'phone'   => 'office',
                'fax'     => 'fax',
                'address' => 'address',
                'city'    => 'city',
                'state'   => 'state',
                'zip'     => 'zip'
            ]);
        }
    }
}

/**
 * Populates empty $info fields with data according to a map.
 *
 * Does NOT replace existing values in $info.
 *
 * Map array  must specify info fields as keys and data fields as values.
 * $map[ $infoField => $dataField ]
 *
 * @param array $info Reference to contactInfo array to populate
 * @param array $data Array of data to copy
 * @param array $map  Associative array of data fields to info fields
 */
function _cob_mapContactInfoFields(array &$info, array $data, array $map)
{
    foreach ($map as $infoField => $dataField) {
        if (empty($info[$infoField])) { $info[$infoField] = $data[$dataField]; }
    }
}
